// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`hub stack synth matches the existing snapshot 1`] = `
{
  "Conditions": {
    "CreateDynamoDBEndpointCondition": {
      "Fn::And": [
        {
          "Condition": "CreateNewVPCCondition",
        },
        {
          "Condition": "MultiAccountDeploymentCondition",
        },
      ],
    },
    "CreateNewVPCCondition": {
      "Fn::Equals": [
        {
          "Ref": "CreateNewVPC",
        },
        "Yes",
      ],
    },
    "ManagementAccountSetupCondition": {
      "Fn::Not": [
        {
          "Condition": "managementIdInputParameter",
        },
      ],
    },
    "MultiAccountDeploymentCondition": {
      "Fn::And": [
        {
          "Condition": "OrganizationSetupCondition",
        },
        {
          "Condition": "ManagementAccountSetupCondition",
        },
      ],
    },
    "OrganizationSetupCondition": {
      "Fn::Not": [
        {
          "Condition": "organizationIdInputParameter",
        },
      ],
    },
    "UseExistingVPCCondition": {
      "Fn::Equals": [
        {
          "Ref": "CreateNewVPC",
        },
        "No",
      ],
    },
    "managementIdInputParameter": {
      "Fn::Equals": [
        {
          "Ref": "ManagementAccountId",
        },
        "",
      ],
    },
    "organizationIdInputParameter": {
      "Fn::Equals": [
        {
          "Ref": "OrganizationID",
        },
        "",
      ],
    },
  },
  "Mappings": {
    "Solution": {
      "Data": {
        "AppRegistryApplicationName": "workspaces-cost-optimizer",
        "AutoStopTimeoutHours": 1,
        "ClusterName": "cost-optimizer-cluster",
        "ID": "SO0218",
        "Image": "PUBLIC_ECR_REGISTRY/workspaces-cost-optimizer:PUBLIC_ECR_TAG",
        "LogGroupName": "/ecs/wco-task",
        "MetricsURL": "https://metrics.awssolutionsbuilder.com/generic",
        "RegisterLambdaFunctionName": "Register-Spoke-Accounts",
        "RoleName": "Workspaces-Cost-Optimizer",
        "SendAnonymousUsageData": "True",
        "SolutionName": "Cost Optimizer for Amazon Workspaces",
        "SpokeAccountWorkspacesRole": "Workspaces-Admin-Spoke",
        "TagKey": "CloudFoundations:CostOptimizerForWorkspaces",
        "TaskDefinitionName": "wco-task",
        "Version": "v2.6.0",
      },
    },
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Select New or Existing VPC for AWS Fargate",
          },
          "Parameters": [
            "CreateNewVPC",
          ],
        },
        {
          "Label": {
            "default": "Existing VPC Settings",
          },
          "Parameters": [
            "ExistingSubnet1Id",
            "ExistingSubnet2Id",
            "ExistingSecurityGroupId",
          ],
        },
        {
          "Label": {
            "default": "New VPC Settings",
          },
          "Parameters": [
            "VpcCIDR",
            "Subnet1CIDR",
            "Subnet2CIDR",
            "EgressCIDR",
          ],
        },
        {
          "Label": {
            "default": "Testing Parameters",
          },
          "Parameters": [
            "DryRun",
            "TestEndOfMonth",
            "LogLevel",
          ],
        },
        {
          "Label": {
            "default": "Pricing Parameters",
          },
          "Parameters": [
            "ValueLimit",
            "StandardLimit",
            "PerformanceLimit",
            "GraphicsLimit",
            "GraphicsProLimit",
            "PowerLimit",
            "PowerProLimit",
          ],
        },
        {
          "Label": {
            "default": "List of AWS Regions",
          },
          "Parameters": [
            "Regions",
          ],
        },
        {
          "Label": {
            "default": "Terminate unused workspaces",
          },
          "Parameters": [
            "TerminateUnusedWorkspaces",
            "NumberOfMonthsForTerminationCheck",
          ],
        },
        {
          "Label": {
            "default": "Multi account deployment",
          },
          "Parameters": [
            "OrganizationID",
            "ManagementAccountId",
          ],
        },
      ],
      "ParameterLabels": {
        "CreateNewVPC": {
          "default": "Create New VPC",
        },
        "DryRun": {
          "default": "Launch in Dry Run Mode",
        },
        "EgressCIDR": {
          "default": "AWS Fargate SecurityGroup CIDR Block",
        },
        "ExistingSecurityGroupId": {
          "default": "Security group ID to launch ECS task",
        },
        "ExistingSubnet1Id": {
          "default": "Subnet ID for first subnet",
        },
        "ExistingSubnet2Id": {
          "default": "Subnet ID for second subnet",
        },
        "LogLevel": {
          "default": "Log Level",
        },
        "ManagementAccountId": {
          "default": "Account ID of the Management Account for the Organization",
        },
        "NumberOfMonthsForTerminationCheck": {
          "default": "Number of months for termination check",
        },
        "OrganizationID": {
          "default": "Organization ID for multi account deployment",
        },
        "Regions": {
          "default": "List of AWS Regions",
        },
        "Subnet1CIDR": {
          "default": "AWS Fargate Subnet 1 CIDR Block",
        },
        "Subnet2CIDR": {
          "default": "AWS Fargate Subnet 2 CIDR Block",
        },
        "TerminateUnusedWorkspaces": {
          "default": "Terminate workspaces not used for a month",
        },
        "TestEndOfMonth": {
          "default": "Simulate End of Month Cleanup",
        },
        "VpcCIDR": {
          "default": "AWS Fargate VPC CIDR Block",
        },
      },
    },
  },
  "Outputs": {
    "BucketName": {
      "Description": "The name of the bucket created by the solution.",
      "Value": {
        "Ref": "CostOptimizerBucket",
      },
    },
    "DryRun": {
      "Export": {
        "Name": "DryRun",
      },
      "Value": {
        "Ref": "DryRun",
      },
    },
    "GraphicsLimit": {
      "Export": {
        "Name": "GraphicsLimit",
      },
      "Value": {
        "Ref": "GraphicsLimit",
      },
    },
    "GraphicsProLimit": {
      "Export": {
        "Name": "GraphicsProLimit",
      },
      "Value": {
        "Ref": "GraphicsProLimit",
      },
    },
    "LogLevel": {
      "Export": {
        "Name": "LogLevel",
      },
      "Value": {
        "Ref": "LogLevel",
      },
    },
    "PerformanceLimit": {
      "Export": {
        "Name": "PerformanceLimit",
      },
      "Value": {
        "Ref": "PerformanceLimit",
      },
    },
    "PowerLimit": {
      "Export": {
        "Name": "PowerLimit",
      },
      "Value": {
        "Ref": "PowerLimit",
      },
    },
    "PowerProLimit": {
      "Export": {
        "Name": "PowerProLimit",
      },
      "Value": {
        "Ref": "PowerProLimit",
      },
    },
    "SendAnonymousData": {
      "Export": {
        "Name": "SendAnonymousData",
      },
      "Value": {
        "Fn::FindInMap": [
          "Solution",
          "Data",
          "SendAnonymousUsageData",
        ],
      },
    },
    "SolutionID": {
      "Export": {
        "Name": "SolutionID",
      },
      "Value": {
        "Fn::FindInMap": [
          "Solution",
          "Data",
          "ID",
        ],
      },
    },
    "SolutionVersion": {
      "Export": {
        "Name": "SolutionVersion",
      },
      "Value": {
        "Fn::FindInMap": [
          "Solution",
          "Data",
          "Version",
        ],
      },
    },
    "StandardLimit": {
      "Export": {
        "Name": "StandardLimit",
      },
      "Value": {
        "Ref": "StandardLimit",
      },
    },
    "TestEndOfMonth": {
      "Export": {
        "Name": "TestEndOfMonth",
      },
      "Value": {
        "Ref": "TestEndOfMonth",
      },
    },
    "UUID": {
      "Description": "Unique identifier for this solution",
      "Value": {
        "Fn::GetAtt": [
          "UUIDGenerator",
          "UUID",
        ],
      },
    },
    "ValueLimit": {
      "Export": {
        "Name": "ValueLimit",
      },
      "Value": {
        "Ref": "ValueLimit",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "CreateNewVPC": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Select "Yes" to deploy the solution in a new VPC.",
      "Type": "String",
    },
    "DryRun": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Solution will generate a change log, but not execute any changes.",
      "Type": "String",
    },
    "EgressCIDR": {
      "AllowedPattern": "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
      "Default": "0.0.0.0/0",
      "Description": "The Cidir Block to restrict the ECS container outbound access",
      "MaxLength": 18,
      "MinLength": 9,
      "Type": "String",
    },
    "ExistingSecurityGroupId": {
      "Default": "",
      "Description": "Security Group Id to launch ECS task. Leave this blank is you selected "Yes" for "Create New VPC"",
      "Type": "String",
    },
    "ExistingSubnet1Id": {
      "Default": "",
      "Description": "Subnet ID to launch ECS task. Leave this blank is you selected "Yes" for "Create New VPC"",
      "Type": "String",
    },
    "ExistingSubnet2Id": {
      "Default": "",
      "Description": "Subnet ID to launch ECS task. Leave this blank is you selected "Yes" for "Create New VPC"",
      "Type": "String",
    },
    "GraphicsLimit": {
      "Default": 217,
      "Description": "The number of hours a Graphics instance can run in a month before being converted to ALWAYS_ON. Default is 81.",
      "Type": "Number",
    },
    "GraphicsProLimit": {
      "Default": 80,
      "Description": "The number of hours a Graphics Pro instance can run in a month before being converted to ALWAYS_ON. Default is 81.",
      "Type": "Number",
    },
    "LogLevel": {
      "AllowedValues": [
        "CRITICAL",
        "ERROR",
        "INFO",
        "WARNING",
        "DEBUG",
      ],
      "Default": "INFO",
      "Type": "String",
    },
    "ManagementAccountId": {
      "Default": "",
      "Description": "Account ID for the management account of the Organization. Leave blank for single account deployments.",
      "Type": "String",
    },
    "NumberOfMonthsForTerminationCheck": {
      "AllowedValues": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
      ],
      "Default": "1",
      "Description": "Provide the number of months to check for inactive period before termination. Default value is 1 month.",
      "Type": "String",
    },
    "OrganizationID": {
      "AllowedPattern": "^$|^o-[a-z0-9]{10,32}$",
      "Default": "",
      "Description": "Organization ID to support multi account deployment. Leave blank for single account deployments.",
      "Type": "String",
    },
    "PerformanceLimit": {
      "Default": 83,
      "Description": "The number of hours a Performance instance can run in a month before being converted to ALWAYS_ON. Default is 81.",
      "Type": "Number",
    },
    "PowerLimit": {
      "Default": 83,
      "Description": "The number of hours a Power instance can run in a month before being converted to ALWAYS_ON. Default is 81.",
      "Type": "Number",
    },
    "PowerProLimit": {
      "Default": 80,
      "Description": "The number of hours a Power Pro instance can run in a month before being converted to ALWAYS_ON. Default is 81.",
      "Type": "Number",
    },
    "Regions": {
      "Default": "",
      "Description": "The list of AWS regions which the solution will scan. Example - us-east-1, us-west-2. Leave blank to scan all regions.",
      "Type": "String",
    },
    "StandardLimit": {
      "Default": 85,
      "Description": "The number of hours a Standard instance can run in a month before being converted to ALWAYS_ON. Default is 81.",
      "Type": "Number",
    },
    "Subnet1CIDR": {
      "AllowedPattern": "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
      "Default": "10.215.10.0/24",
      "MaxLength": 18,
      "MinLength": 9,
      "Type": "String",
    },
    "Subnet2CIDR": {
      "AllowedPattern": "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
      "Default": "10.215.20.0/24",
      "MaxLength": 18,
      "MinLength": 9,
      "Type": "String",
    },
    "TerminateUnusedWorkspaces": {
      "AllowedValues": [
        "Yes",
        "No",
        "Dry Run",
      ],
      "Default": "No",
      "Description": "Select "Yes" to terminate Workspaces not used for a month.",
      "Type": "String",
    },
    "TestEndOfMonth": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Overrides date and forces the solution to run as if it is the end of the month.",
      "Type": "String",
    },
    "ValueLimit": {
      "Default": 81,
      "Description": "The number of hours a Value instance can run in a month before being converted to ALWAYS_ON. Default is 81.",
      "Type": "Number",
    },
    "VpcCIDR": {
      "AllowedPattern": "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
      "Default": "10.215.0.0/16",
      "Description": "This VPC launches containers. Change addresses only if it conflicts with your network.",
      "MaxLength": 18,
      "MinLength": 9,
      "Type": "String",
    },
  },
  "Resources": {
    "AppRegistryApplicationAttributeAssociation": {
      "Properties": {
        "Application": {
          "Fn::GetAtt": [
            "Application",
            "Id",
          ],
        },
        "AttributeGroup": {
          "Fn::GetAtt": [
            "DefaultApplicationAttributeGroup",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation",
    },
    "AppRegistryApplicationStackAssociation": {
      "Properties": {
        "Application": {
          "Fn::GetAtt": [
            "Application",
            "Id",
          ],
        },
        "Resource": {
          "Ref": "AWS::StackId",
        },
        "ResourceType": "CFN_STACK",
      },
      "Type": "AWS::ServiceCatalogAppRegistry::ResourceAssociation",
    },
    "Application": {
      "Properties": {
        "Description": "Service Catalog application to track and manage all your resources for the solution workspaces-cost-optimizer",
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::FindInMap": [
                  "Solution",
                  "Data",
                  "AppRegistryApplicationName",
                ],
              },
              {
                "Ref": "AWS::Region",
              },
              {
                "Ref": "AWS::AccountId",
              },
            ],
          ],
        },
        "Tags": {
          "ApplicationType": "AWS-Solutions",
          "CloudFoundations:CostOptimizerForWorkspaces": {
            "Ref": "AWS::StackName",
          },
          "SolutionDomain": "CloudFoundations",
          "SolutionID": "SO0218",
          "SolutionName": "workspaces-cost-optimizer",
          "SolutionVersion": "v2.6.0",
        },
      },
      "Type": "AWS::ServiceCatalogAppRegistry::Application",
    },
    "ApplicationInsightsConfiguration": {
      "DependsOn": [
        "Application",
      ],
      "Properties": {
        "AutoConfigurationEnabled": true,
        "CWEMonitorEnabled": true,
        "OpsCenterEnabled": true,
        "ResourceGroupName": {
          "Fn::Join": [
            "-",
            [
              "AWS_AppRegistry_Application",
              {
                "Fn::FindInMap": [
                  "Solution",
                  "Data",
                  "AppRegistryApplicationName",
                ],
              },
              {
                "Ref": "AWS::Region",
              },
              {
                "Ref": "AWS::AccountId",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApplicationInsights::Application",
    },
    "ApplicationShare": {
      "Condition": "MultiAccountDeploymentCondition",
      "Properties": {
        "AllowExternalPrincipals": false,
        "Name": {
          "Ref": "AWS::StackName",
        },
        "PermissionArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":ram::aws:permission/AWSRAMPermissionServiceCatalogAppRegistryApplicationAllowAssociation",
              ],
            ],
          },
        ],
        "Principals": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":organizations::",
                {
                  "Ref": "ManagementAccountId",
                },
                ":organization/",
                {
                  "Ref": "OrganizationID",
                },
              ],
            ],
          },
        ],
        "ResourceArns": [
          {
            "Fn::GetAtt": [
              "Application",
              "Arn",
            ],
          },
        ],
      },
      "Type": "AWS::RAM::ResourceShare",
    },
    "CostOptimizerAdminPolicy": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "ecr:GetAuthorizationToken only supports * as the resource",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/ecs/wco-task/*",
                  ],
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "workspaces:DescribeTags",
                "workspaces:DescribeWorkspaces",
                "workspaces:DescribeWorkspaceDirectories",
                "workspaces:ModifyWorkspaceProperties",
                "workspaces:TerminateWorkspaces",
                "workspaces:DescribeWorkspacesConnectionStatus",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":workspaces:*:",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":directory/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":workspaces:*:",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":workspace/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":workspaces:*:",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":workspacebundle/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:PutObject",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":s3:::",
                    {
                      "Ref": "CostOptimizerBucket",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "cloudwatch:GetMetricStatistics",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":iam::*:role/",
                    {
                      "Fn::FindInMap": [
                        "Solution",
                        "Data",
                        "SpokeAccountWorkspacesRole",
                      ],
                    },
                    "-",
                    {
                      "Ref": "AWS::Region",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CostOptimizerAdminPolicy",
        "Roles": [
          {
            "Ref": "CostOptimizerAdminRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CostOptimizerAdminRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "Static naming is necessary for hub account to assume this role",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::FindInMap": [
                  "Solution",
                  "Data",
                  "RoleName",
                ],
              },
              {
                "Ref": "AWS::Region",
              },
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "CostOptimizerBucket": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 365,
              "Id": "DeletionRule",
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "LogsBucket",
          },
          "LogFilePrefix": "wco_bucket/",
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "CostOptimizerCluster": {
      "Properties": {
        "ClusterName": {
          "Fn::FindInMap": [
            "Solution",
            "Data",
            "ClusterName",
          ],
        },
        "ClusterSettings": [
          {
            "Name": "containerInsights",
            "Value": "enabled",
          },
        ],
        "Tags": [
          {
            "Key": {
              "Fn::FindInMap": [
                "Solution",
                "Data",
                "TagKey",
              ],
            },
            "Value": {
              "Ref": "AWS::StackName",
            },
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "CostOptimizerDynamoDBPolicy": {
      "Condition": "MultiAccountDeploymentCondition",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "dynamodb:Scan",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    {
                      "Ref": "SpokeAccountTable",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CostOptimizerDynamoDBPolicy",
        "Roles": [
          {
            "Ref": "CostOptimizerAdminRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CostOptimizerLogs": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "KMS encryption unnecessary for log group",
            },
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "/",
            [
              {
                "Fn::FindInMap": [
                  "Solution",
                  "Data",
                  "LogGroupName",
                ],
              },
              {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "RetentionInDays": 365,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CostOptimizerTaskDefinition": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Cpu": 256,
            "Environment": [
              {
                "Name": "LogLevel",
                "Value": {
                  "Ref": "LogLevel",
                },
              },
              {
                "Name": "DryRun",
                "Value": {
                  "Ref": "DryRun",
                },
              },
              {
                "Name": "TestEndOfMonth",
                "Value": {
                  "Ref": "TestEndOfMonth",
                },
              },
              {
                "Name": "SendAnonymousData",
                "Value": {
                  "Fn::FindInMap": [
                    "Solution",
                    "Data",
                    "SendAnonymousUsageData",
                  ],
                },
              },
              {
                "Name": "SolutionVersion",
                "Value": {
                  "Fn::FindInMap": [
                    "Solution",
                    "Data",
                    "Version",
                  ],
                },
              },
              {
                "Name": "SolutionID",
                "Value": {
                  "Fn::FindInMap": [
                    "Solution",
                    "Data",
                    "ID",
                  ],
                },
              },
              {
                "Name": "UUID",
                "Value": {
                  "Fn::GetAtt": [
                    "UUIDGenerator",
                    "UUID",
                  ],
                },
              },
              {
                "Name": "BucketName",
                "Value": {
                  "Ref": "CostOptimizerBucket",
                },
              },
              {
                "Name": "ValueLimit",
                "Value": {
                  "Ref": "ValueLimit",
                },
              },
              {
                "Name": "StandardLimit",
                "Value": {
                  "Ref": "StandardLimit",
                },
              },
              {
                "Name": "PerformanceLimit",
                "Value": {
                  "Ref": "PerformanceLimit",
                },
              },
              {
                "Name": "PowerLimit",
                "Value": {
                  "Ref": "PowerLimit",
                },
              },
              {
                "Name": "PowerProLimit",
                "Value": {
                  "Ref": "PowerProLimit",
                },
              },
              {
                "Name": "GraphicsLimit",
                "Value": {
                  "Ref": "GraphicsLimit",
                },
              },
              {
                "Name": "GraphicsProLimit",
                "Value": {
                  "Ref": "GraphicsProLimit",
                },
              },
              {
                "Name": "MetricsEndpoint",
                "Value": {
                  "Fn::FindInMap": [
                    "Solution",
                    "Data",
                    "MetricsURL",
                  ],
                },
              },
              {
                "Name": "UserAgentString",
                "Value": {
                  "Fn::Sub": [
                    "AwsSolution/\${SolutionID}/\${Version}",
                    {
                      "SolutionID": {
                        "Fn::FindInMap": [
                          "Solution",
                          "Data",
                          "ID",
                        ],
                      },
                      "Version": {
                        "Fn::FindInMap": [
                          "Solution",
                          "Data",
                          "Version",
                        ],
                      },
                    },
                  ],
                },
              },
              {
                "Name": "AutoStopTimeoutHours",
                "Value": {
                  "Fn::FindInMap": [
                    "Solution",
                    "Data",
                    "AutoStopTimeoutHours",
                  ],
                },
              },
              {
                "Name": "Regions",
                "Value": {
                  "Ref": "Regions",
                },
              },
              {
                "Name": "TerminateUnusedWorkspaces",
                "Value": {
                  "Ref": "TerminateUnusedWorkspaces",
                },
              },
              {
                "Name": "SpokeAccountDynamoDBTable",
                "Value": {
                  "Fn::If": [
                    "MultiAccountDeploymentCondition",
                    {
                      "Ref": "SpokeAccountTable",
                    },
                    {
                      "Ref": "AWS::NoValue",
                    },
                  ],
                },
              },
              {
                "Name": "NumberOfMonthsForTerminationCheck",
                "Value": {
                  "Ref": "NumberOfMonthsForTerminationCheck",
                },
              },
            ],
            "Essential": true,
            "Image": {
              "Fn::FindInMap": [
                "Solution",
                "Data",
                "Image",
              ],
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CostOptimizerLogs",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "workspace-cost-optimizer",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CostOptimizerAdminRole",
            "Arn",
          ],
        },
        "Family": {
          "Fn::FindInMap": [
            "Solution",
            "Data",
            "TaskDefinitionName",
          ],
        },
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "CostOptimizerAdminRole",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "DefaultApplicationAttributeGroup": {
      "Properties": {
        "Attributes": {
          "applicationType": "AWS-Solutions",
          "solutionID": "SO0218",
          "solutionName": "workspaces-cost-optimizer",
          "version": "v2.6.0",
        },
        "Description": "Attribute group for solution information",
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::FindInMap": [
                  "Solution",
                  "Data",
                  "AppRegistryApplicationName",
                ],
              },
              {
                "Ref": "AWS::Region",
              },
              {
                "Ref": "AWS::AccountId",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ServiceCatalogAppRegistry::AttributeGroup",
    },
    "DynamoDBGatewayEndpoint": {
      "Condition": "CreateDynamoDBEndpointCondition",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "dynamodb:Scan",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalArn": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":iam::",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":role/",
                          {
                            "Fn::FindInMap": [
                              "Solution",
                              "Data",
                              "RoleName",
                            ],
                          },
                          "-",
                          {
                            "Ref": "AWS::Region",
                          },
                        ],
                      ],
                    },
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": "*",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    {
                      "Ref": "SpokeAccountTable",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RouteTableIds": [
          {
            "Ref": "MainRouteTable",
          },
        ],
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region",
              },
              ".dynamodb",
            ],
          ],
        },
        "VpcId": {
          "Ref": "VPC",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "FlowLog": {
      "Condition": "CreateNewVPCCondition",
      "Properties": {
        "DeliverLogsPermissionArn": {
          "Fn::GetAtt": [
            "FlowLogRole",
            "Arn",
          ],
        },
        "LogGroupName": {
          "Ref": "FlowLogGroup",
        },
        "ResourceId": {
          "Ref": "VPC",
        },
        "ResourceType": "VPC",
        "TrafficType": "ALL",
      },
      "Type": "AWS::EC2::FlowLog",
    },
    "FlowLogGroup": {
      "Condition": "CreateNewVPCCondition",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "CloudWatch logs are encrypted by the service.",
            },
            {
              "id": "W86",
              "reason": "CloudWatch logs are set to never expire.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "FlowLogRole": {
      "Condition": "CreateNewVPCCondition",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "vpc-flow-logs.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "FlowLogsPolicy": {
      "Condition": "CreateNewVPCCondition",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "FlowLogGroup",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "flowlogs-policy",
        "Roles": [
          {
            "Ref": "FlowLogRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InternetGateway": {
      "Condition": "CreateNewVPCCondition",
      "Properties": {
        "Tags": [
          {
            "Key": {
              "Fn::FindInMap": [
                "Solution",
                "Data",
                "TagKey",
              ],
            },
            "Value": {
              "Ref": "AWS::StackName",
            },
          },
          {
            "Key": "Name",
            "Value": "cost-optimizer-igw",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "InternetGatewayAttachment": {
      "Condition": "CreateNewVPCCondition",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway",
        },
        "VpcId": {
          "Ref": "VPC",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "IntraVPCSecurityGroup": {
      "Condition": "CreateNewVPCCondition",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W36",
              "reason": "flagged as not having a Description, property is GroupDescription not Description",
            },
            {
              "id": "W40",
              "reason": "IpProtocol set to -1 (any) as ports are not known prior to running tests",
            },
          ],
        },
      },
      "Properties": {
        "GroupDescription": "Security group that allows inbound from the VPC and outbound to the Internet",
        "VpcId": {
          "Ref": "VPC",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "InvokeECSTaskPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":ecs:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":task-definition/wco-task",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":ecs:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":task-definition/wco-task:*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CostOptimizerAdminRole",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "InvokeECSTaskPolicy",
        "Roles": [
          {
            "Ref": "InvokeECSTaskRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InvokeECSTaskRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LogsBucket": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W35",
              "reason": " Access logging is not required for this bucket.",
            },
            {
              "id": "W51",
              "reason": "Policy is not required for this bucket.",
            },
          ],
        },
      },
      "Properties": {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "ObjectWriter",
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "MainRouteTable": {
      "Condition": "CreateNewVPCCondition",
      "Properties": {
        "VpcId": {
          "Ref": "VPC",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "RegisterSpokeAccountsFunction": {
      "Condition": "MultiAccountDeploymentCondition",
      "DependsOn": [
        "RegisterSpokeAccountsFunctionLambdaRole",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W58",
              "reason": "The lambda function has access to write logs",
            },
            {
              "id": "W89",
              "reason": "The lambda function does not need access to resources in VPC",
            },
            {
              "id": "W92",
              "reason": "ReservedConcurrentExecutions depends on the number of events for event bus",
            },
            {
              "id": "W12",
              "reason": "Resource * is necessary for xray:PutTraceSegments and xray:PutTelemetryRecords.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "",
              [
                "solutions-",
                {
                  "Ref": "AWS::Region",
                },
              ],
            ],
          },
          "S3Key": "workspaces-cost-optimizer/v2.6.0/register_spoke_lambda.zip",
        },
        "Environment": {
          "Variables": {
            "DDB_TABLE_NAME": {
              "Ref": "SpokeAccountTable",
            },
            "LOG_LEVEL": {
              "Ref": "LogLevel",
            },
            "USER_AGENT_STRING": "AwsSolution/SO0218/v2.6.0",
          },
        },
        "FunctionName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::FindInMap": [
                  "Solution",
                  "Data",
                  "RegisterLambdaFunctionName",
                ],
              },
              {
                "Ref": "AWS::Region",
              },
            ],
          ],
        },
        "Handler": "register_spoke_lambda/register_spoke_accounts.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "RegisterSpokeAccountsFunctionLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 300,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "RegisterSpokeAccountsFunctionLambdaPolicy": {
      "Condition": "MultiAccountDeploymentCondition",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/",
                    {
                      "Ref": "AWS::Partition",
                    },
                    "/lambda/*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    {
                      "Ref": "SpokeAccountTable",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "RegisterSpokeAccountsFunctionLambdaRole",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "InvokeECSTaskPolicy",
        "Roles": [
          {
            "Ref": "RegisterSpokeAccountsFunctionLambdaRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RegisterSpokeAccountsFunctionLambdaRole": {
      "Condition": "MultiAccountDeploymentCondition",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RegisterSpokeAccountsFunctionResourcePolicy": {
      "Condition": "MultiAccountDeploymentCondition",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F13",
              "reason": "Lambda principal is a wildcard to allow persmissions to all accounts in the Organization.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RegisterSpokeAccountsFunction",
            "Arn",
          ],
        },
        "Principal": "*",
        "PrincipalOrgID": {
          "Ref": "OrganizationID",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "RouteToInternet": {
      "Condition": "CreateNewVPCCondition",
      "DependsOn": [
        "InternetGatewayAttachment",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway",
        },
        "RouteTableId": {
          "Ref": "MainRouteTable",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "S3BucketPolicy": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W51",
              "reason": "Policy is not required for this bucket.",
            },
          ],
        },
      },
      "Properties": {
        "Bucket": {
          "Ref": "CostOptimizerBucket",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CostOptimizerBucket",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CostOptimizerBucket",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "S3GatewayEndpoint": {
      "Condition": "CreateNewVPCCondition",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutObject",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalArn": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":iam::",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":role/",
                          {
                            "Fn::FindInMap": [
                              "Solution",
                              "Data",
                              "RoleName",
                            ],
                          },
                          "-",
                          {
                            "Ref": "AWS::Region",
                          },
                        ],
                      ],
                    },
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": "*",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":s3:::",
                    {
                      "Ref": "CostOptimizerBucket",
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RouteTableIds": [
          {
            "Ref": "MainRouteTable",
          },
        ],
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region",
              },
              ".s3",
            ],
          ],
        },
        "VpcId": {
          "Ref": "VPC",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ScheduleRule": {
      "Properties": {
        "Description": "Rule to trigger WorkSpacesCostOptimizer function on a schedule.",
        "ScheduleExpression": "cron(0 23 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "CostOptimizerCluster",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "ENABLED",
                  "SecurityGroups": [
                    {
                      "Fn::If": [
                        "CreateNewVPCCondition",
                        {
                          "Fn::GetAtt": [
                            "IntraVPCSecurityGroup",
                            "GroupId",
                          ],
                        },
                        {
                          "Ref": "ExistingSecurityGroupId",
                        },
                      ],
                    },
                  ],
                  "Subnets": [
                    {
                      "Fn::If": [
                        "CreateNewVPCCondition",
                        {
                          "Fn::GetAtt": [
                            "Subnet1",
                            "SubnetId",
                          ],
                        },
                        {
                          "Ref": "AWS::NoValue",
                        },
                      ],
                    },
                    {
                      "Fn::If": [
                        "CreateNewVPCCondition",
                        {
                          "Fn::GetAtt": [
                            "Subnet2",
                            "SubnetId",
                          ],
                        },
                        {
                          "Ref": "AWS::NoValue",
                        },
                      ],
                    },
                    {
                      "Fn::If": [
                        "UseExistingVPCCondition",
                        {
                          "Ref": "ExistingSubnet1Id",
                        },
                        {
                          "Ref": "AWS::NoValue",
                        },
                      ],
                    },
                    {
                      "Fn::If": [
                        "UseExistingVPCCondition",
                        {
                          "Ref": "ExistingSubnet2Id",
                        },
                        {
                          "Ref": "AWS::NoValue",
                        },
                      ],
                    },
                  ],
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskDefinitionArn": {
                "Fn::GetAtt": [
                  "CostOptimizerTaskDefinition",
                  "TaskDefinitionArn",
                ],
              },
            },
            "Id": "CostOptimizerTaskDefinition",
            "RoleArn": {
              "Fn::GetAtt": [
                "InvokeECSTaskRole",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "SecurityGroupEgress": {
      "Condition": "CreateNewVPCCondition",
      "Properties": {
        "CidrIp": {
          "Ref": "EgressCIDR",
        },
        "GroupId": {
          "Fn::GetAtt": [
            "IntraVPCSecurityGroup",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "SolutionHelperFunction": {
      "DependsOn": [
        "SolutionHelperRole",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W58",
              "reason": "The lambda function has access to write logs",
            },
            {
              "id": "W89",
              "reason": "The lambda function does not need access to resources in VPC",
            },
            {
              "id": "W92",
              "reason": "The lambda function only executes on stack creation and deletion and so does not need reserved concurrency.",
            },
            {
              "id": "W12",
              "reason": "Resource * is necessary for xray:PutTraceSegments and xray:PutTelemetryRecords.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "",
              [
                "solutions-",
                {
                  "Ref": "AWS::Region",
                },
              ],
            ],
          },
          "S3Key": "workspaces-cost-optimizer/v2.6.0/uuid_generator.zip",
        },
        "Description": "Solution Helper Lambda Function",
        "Environment": {
          "Variables": {
            "LOG_LEVEL": {
              "Ref": "LogLevel",
            },
            "USER_AGENT_STRING": "AwsSolution/SO0218/v2.6.0",
          },
        },
        "Handler": "uuid_generator/uuid_generator.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "SolutionHelperRole",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Tags": [
          {
            "Key": {
              "Fn::FindInMap": [
                "Solution",
                "Data",
                "TagKey",
              ],
            },
            "Value": {
              "Ref": "AWS::StackName",
            },
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SolutionHelperPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/",
                    {
                      "Ref": "AWS::Partition",
                    },
                    "/lambda/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "SolutionHelperRole",
                  "Arn",
                ],
              },
            },
            {
              "Action": "cloudformation:DescribeStacks",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SolutionHelperPolicy",
        "Roles": [
          {
            "Ref": "SolutionHelperRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SolutionHelperRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "SpokeAccountTable": {
      "Condition": "MultiAccountDeploymentCondition",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "account_id",
            "AttributeType": "S",
          },
          {
            "AttributeName": "role_name",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "account_id",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "role_name",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": {
          "SSEEnabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "Subnet1": {
      "Condition": "CreateNewVPCCondition",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": {
          "Ref": "Subnet1CIDR",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "cost-optimizer-vpc-subnet1",
          },
        ],
        "VpcId": {
          "Ref": "VPC",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "Subnet1RouteTableAssociation": {
      "Condition": "CreateNewVPCCondition",
      "Properties": {
        "RouteTableId": {
          "Ref": "MainRouteTable",
        },
        "SubnetId": {
          "Fn::GetAtt": [
            "Subnet1",
            "SubnetId",
          ],
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "Subnet2": {
      "Condition": "CreateNewVPCCondition",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": {
          "Ref": "Subnet2CIDR",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "cost-optimizer-vpc-subnet2",
          },
        ],
        "VpcId": {
          "Ref": "VPC",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "Subnet2RouteTableAssociation": {
      "Condition": "CreateNewVPCCondition",
      "Properties": {
        "RouteTableId": {
          "Ref": "MainRouteTable",
        },
        "SubnetId": {
          "Fn::GetAtt": [
            "Subnet2",
            "SubnetId",
          ],
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "UUIDGenerator": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "DependsOn": {
          "Fn::GetAtt": [
            "SolutionHelperFunction",
            "Arn",
          ],
        },
        "Region": {
          "Ref": "AWS::Region",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelperFunction",
            "Arn",
          ],
        },
      },
      "Type": "Custom::UUIDGenerator",
      "UpdateReplacePolicy": "Delete",
    },
    "UsageReportBucketResourcesAccessLoggingBucketPolicyE13961AA": {
      "Properties": {
        "Bucket": {
          "Ref": "LogsBucket",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "LogsBucket",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "LogsBucket",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "VPC": {
      "Condition": "CreateNewVPCCondition",
      "Properties": {
        "CidrBlock": {
          "Ref": "VpcCIDR",
        },
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": {
              "Fn::FindInMap": [
                "Solution",
                "Data",
                "TagKey",
              ],
            },
            "Value": {
              "Ref": "AWS::StackName",
            },
          },
          {
            "Key": "Name",
            "Value": "cost-optimizer-vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
