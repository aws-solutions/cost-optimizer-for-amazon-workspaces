Description: "(SO0018) - WorkSpaces Cost Optimizer: A solution for automatically optimizing the cost of Amazon Workspaces version %VERSION%"
Parameters:
  CreateNewVPC:
    Type: String
    Description: Select "Yes" to deploy the solution in a new VPC.
    Default: "Yes"
    AllowedValues:
    - "Yes"
    - "No"
  ExistingSubnet1Id:
    Type: String
    Description: Subnet ID to launch ECS task. Leave this blank is you selected "Yes" for "Create New VPC"
  ExistingSubnet2Id:
    Type: String
    Description: Subnet ID to launch ECS task. Leave this blank is you selected "Yes" for "Create New VPC"
  ExistingSecurityGroupId:
    Type: String
    Description: Security Group Id to launch ECS task. Leave this blank is you selected "Yes" for "Create New VPC"
  VpcCIDR:
    Type: String
    Default: "10.215.0.0/16"
    Description: This VPC launches containers. Change addresses only if it conflicts with your network.
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    MinLength: 9
    MaxLength: 18
  Subnet1CIDR:
    Type: String
    Default: "10.215.10.0/24"
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    MinLength: 9
    MaxLength: 18
  Subnet2CIDR:
    Type: String
    Default: "10.215.20.0/24"
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    MinLength: 9
    MaxLength: 18
  EgressCIDR:
    Type: String
    Default: 0.0.0.0/0
    Description: The Cidir Block to restrict the ECS container outbound access
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  LogLevel:
    Type: String
    Default: INFO
    AllowedValues:
    - CRITICAL
    - ERROR
    - INFO
    - WARNING
    - DEBUG
  DryRun:
    Type: String
    Description: Solution will generate a change log, but not execute any changes.
    Default: "Yes"
    AllowedValues:
    - "Yes"
    - "No"
  TestEndOfMonth:
    Type: String
    Description: Overrides date and forces the solution to run as if it is the end of the month.
    Default: "No"
    AllowedValues:
    - "Yes"
    - "No"
  ValueLimit:
    Type: Number
    Description: The number of hours a Value instance can run in a month before being converted to ALWAYS_ON. Default is 81.
    Default: 81
  StandardLimit:
    Type: Number
    Description: The number of hours a Standard instance can run in a month before being converted to ALWAYS_ON. Default is 85.
    Default: 85
  PerformanceLimit:
    Type: Number
    Description: The number of hours a Performance instance can run in a month before being converted to ALWAYS_ON. Default is 83.
    Default: 83
  PowerLimit:
    Type: Number
    Description: The number of hours a Power instance can run in a month before being converted to ALWAYS_ON. Default is 83.
    Default: 83
  PowerProLimit:
    Type: Number
    Description: The number of hours a Power Pro instance can run in a month before being converted to ALWAYS_ON. Default is 80.
    Default: 80
  GraphicsLimit:
    Type: Number
    Description: The number of hours a Graphics instance can run in a month before being converted to ALWAYS_ON. Default is 217.
    Default: 217
  GraphicsProLimit:
    Type: Number
    Description: The number of hours a Graphics Pro instance can run in a month before being converted to ALWAYS_ON. Default is 80.
    Default: 80
  OnlyInCurrentRegion:
    Type: String
    Description: Execute the cost optimizer only in the current region the cloudformation stack has been installed
    Default: "No"
    AllowedValues:
    - "Yes"
    - "No"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "Select New or Existing VPC for AWS Fargate"
      Parameters:
        - CreateNewVPC
    - Label:
        default: "Existing VPC Settings"
      Parameters:
        - ExistingSubnet1Id
        - ExistingSubnet2Id
        - ExistingSecurityGroupId
    - Label:
        default: "New VPC Settings"
      Parameters:
        - VpcCIDR
        - Subnet1CIDR
        - Subnet2CIDR
        - EgressCIDR
    - Label:
        default: Testing Parameters
      Parameters:
        - DryRun
        - TestEndOfMonth
        - LogLevel
        - OnlyInCurrentRegion
    - Label:
        default: Pricing Parameters
      Parameters:
        - ValueLimit
        - StandardLimit
        - PerformanceLimit
        - GraphicsLimit
        - GraphicsProLimit
        - PowerLimit
        - PowerProLimit
    ParameterLabels:
      VpcCIDR:
        default: "AWS Fargate VPC CIDR Block"
      Subnet1CIDR:
        default: "AWS Fargate Subnet 1 CIDR Block"
      Subnet2CIDR:
        default: "AWS Fargate Subnet 2 CIDR Block"
      EgressCIDR:
        default: "AWS Fargate SecurityGroup CIDR Block"
      DryRun:
        default: "Launch in Dry Run Mode"
      OnlyInCurrentRegion:
        default: "Execute only in deployed aws region"
      TestEndOfMonth:
        default: "Simulate End of Month Cleanup"
      LogLevel:
        default: "Log Level"
      CreateNewVPC:
        default: "Create New VPC"
      ExistingSubnet1Id:
        default: "Subnet ID for first subnet"
      ExistingSubnet2Id:
        default: "Subnet ID for second subnet"
      ExistingSecurityGroupId:
        default: "Security group ID to launch ECS task"

Mappings:
  Solution:
    Data:
      ClusterName: "cost-optimizer-cluster"
      TaskDefinitionName: "wco-task"
      LogGroupName: "/ecs/wco-task"
      ID: "SO0018"
      Version: "%VERSION%" 
      SendAnonymousUsageData: True
      MetricsURL: "https://metrics.awssolutionsbuilder.com/generic"
      AutoStopTimeoutHours: 1
      Image: "898061675696.dkr.ecr.us-east-1.amazonaws.com/wco:2.3.0"
      ECRRepository: "arn:aws:ecr:us-east-1:898061675696:repository/wco"
    

Conditions:
  CreateNewVPC: !Equals
    - !Ref CreateNewVPC
    - 'Yes'

Resources:

  # Permissions & Policies [start]

  CostOptimizerAdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - "ecs-tasks.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Path: "/"

  CostOptimizerAdminPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CostOptimizerAdminPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/ecs/wco-task/*"]]
        - Effect: Allow
          Action:
          - ecr:GetAuthorizationToken
          Resource: "*"
        - Effect: Allow
          Action:
          - ecr:BatchCheckLayerAvailability
          - ecr:BatchGetImage
          - ecr:GetDownloadUrlForLayer
          Resource: !FindInMap [Solution, Data, "ECRRepository"]
        - Effect: Allow
          Action:
          - workspaces:DescribeTags
          - workspaces:DescribeWorkspaces
          - workspaces:DescribeWorkspaceDirectories
          - workspaces:ModifyWorkspaceProperties
          Resource:
            - !Sub "arn:aws:workspaces:*:${AWS::AccountId}:directory/*"
            - !Sub "arn:aws:workspaces:*:${AWS::AccountId}:workspace/*"
            - !Sub "arn:aws:workspaces:*:${AWS::AccountId}:workspacebundle/*"
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
            !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref CostOptimizerBucket
              - /*
        - Effect: Allow
          Action:
          - cloudwatch:GetMetricStatistics
          Resource:
            - "*"
      Roles:
      - !Ref CostOptimizerAdminRole
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: "CloudWatch GetMetricStatistics does not support resource level permissions"

  CostOptimizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"

  CostOptimizerLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CostOptimizerLambdaPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
        - Effect: Allow
          Action:
          - ecs:RunTask
          Resource: !Join [":", [ "arn:aws:ecs", !Ref "AWS::Region", !Ref "AWS::AccountId", "task-definition/wco-task" ] ]
        - Effect: Allow
          Action:
          - iam:PassRole
          Resource: !GetAtt CostOptimizerAdminRole.Arn
      Roles:
      - !Ref CostOptimizerLambdaRole

  ScheduleRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CostOptimizerCreateTaskFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduleRule.Arn

  # Permissions & Policies [end]

  # VPC [start]

  VPC:
    Type: AWS::EC2::VPC
    Condition: CreateNewVPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "cost-optimizer-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateNewVPC
    Properties:
      Tags:
        - Key: Name
          Value: "cost-optimizer-igw"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateNewVPC
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  Subnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateNewVPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Ref Subnet1CIDR
      Tags:
        - Key: Name
          Value: "cost-optimizer-vpc-subnet1"

  Subnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateNewVPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Ref Subnet2CIDR
      Tags:
        - Key: Name
          Value: "cost-optimizer-vpc-subnet2"

  IntraVPCSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Condition: CreateNewVPC
    Properties:
      GroupDescription: "Security group that allows inbound from the VPC and outbound to the Internet"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: !Ref EgressCIDR
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W36
            reason: "flagged as not having a Description, property is GroupDescription not Description"
          - id: W40
            reason: "IpProtocol set to -1 (any) as ports are not known prior to running tests"

  MainRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateNewVPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "cost-optimizer-vpc-routetable"

  RouteToInternet:
    Type: AWS::EC2::Route
    Condition: CreateNewVPC
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref MainRouteTable
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateNewVPC
    Properties:
      RouteTableId: !Ref MainRouteTable
      SubnetId: !Ref Subnet1

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateNewVPC
    Properties:
      RouteTableId: !Ref MainRouteTable
      SubnetId: !Ref Subnet2

  # VPC [end]

  # S3 [start]

  LogsBucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: Access logging is not required for this bucket.
          - id: W51
            reason: Policy is not required for this bucket.
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  CostOptimizerBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: "Retain"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W51
            reason: Policy is not required for this bucket.
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref LogsBucket
        LogFilePrefix: wco_bucket/
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref CostOptimizerBucket
      PolicyDocument:
        Statement:
        - Sid: AllowSSLRequestsOnly
          Action: s3:*
          Effect: Deny
          Resource:
          - !GetAtt CostOptimizerBucket.Arn
          - !Join [ "", [!GetAtt CostOptimizerBucket.Arn, "/*"]]
          Condition:
            Bool:
              aws:SecureTransport: 'false'
          Principal: "*"
            

  # S3 [end]

  # Logs [start]

  CostOptimizerLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ "/", [!FindInMap [Solution, Data, "LogGroupName"], !Ref "AWS::StackName"] ]
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "CloudWatch logs are encrypted by the service."
          - id: W86
            reason: "CloudWatch logs are set to never expire."

  # Logs [end]

  # ECS/Fargate [start]

  # Create the ECS Cluster
  CostOptimizerCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !FindInMap [Solution, Data, "ClusterName"]
      ClusterSettings:
      - Name: containerInsights
        Value: enabled

  # Create the task definition
  CostOptimizerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256"
      Family:  !FindInMap [Solution, Data, "TaskDefinitionName"]
      Memory: "1024"
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt CostOptimizerAdminRole.Arn
      TaskRoleArn: !GetAtt CostOptimizerAdminRole.Arn
      ContainerDefinitions:
        - Name: "workspace-cost-optimizer"
          Image: !FindInMap [Solution, Data, "Image"]
          Essential: True
          Cpu: 256

          # Environment variables can be customized by adding parameters/values below. Secrets
          # should be stored in AWS Systems Manager Parameter Store.
          # See: https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html
          Environment:
            - Name: LogLevel
              Value: !Ref LogLevel
            - Name: DryRun
              Value: !Ref DryRun
            - Name: OnlyInCurrentRegion
              Value: !Ref OnlyInCurrentRegion
            - Name: TestEndOfMonth
              Value: !Ref TestEndOfMonth
            - Name: SendAnonymousData
              Value: !FindInMap [Solution, Data, "SendAnonymousUsageData"]
            - Name: SolutionVersion
              Value: !FindInMap [Solution, Data, "Version"]
            - Name: SolutionID
              Value: !FindInMap [Solution, Data, "ID"]
            - Name: UUID
              Value: !GetAtt UUIDGenerator.UUID
            - Name: BucketName
              Value: !Ref CostOptimizerBucket
            - Name: ValueLimit
              Value: !Ref ValueLimit
            - Name: StandardLimit
              Value: !Ref StandardLimit
            - Name: PerformanceLimit
              Value: !Ref PerformanceLimit
            - Name: PowerLimit
              Value: !Ref PowerLimit
            - Name: PowerProLimit
              Value: !Ref PowerProLimit
            - Name: GraphicsLimit
              Value: !Ref GraphicsLimit
            - Name: GraphicsProLimit
              Value: !Ref GraphicsProLimit
            - Name: MetricsEndpoint
              Value: !FindInMap [Solution, Data, "MetricsURL"]
            - Name: UserAgentString
              Value: !Sub
                - "AwsSolution/${SolutionID}/${Version}"
                - SolutionID: !FindInMap [Solution, Data, "ID"]
                  Version: !FindInMap [Solution, Data, "Version"]
            - Name: AutoStopTimeoutHours
              Value: !FindInMap [Solution, Data, "AutoStopTimeoutHours"]

          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref CostOptimizerLogs
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"

  CostOptimizerCreateTaskFunction:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: "The lambda function has access to write logs"
          - id: W89
            reason: "The lambda function does not need access to resources in VPC"
    Properties:
      Role: !GetAtt CostOptimizerLambdaRole.Arn
      Description: WorkspaceCostOptimizer CreateTask Lambda Function
      Environment:
        Variables:
          CLUSTER: !FindInMap [Solution, Data, "ClusterName"]
          TASK_DEFINITION: !FindInMap [Solution, Data, "TaskDefinitionName"]
          SECURITY_GROUPS:
            !If [CreateNewVPC, !Ref IntraVPCSecurityGroup, !Ref ExistingSecurityGroupId]
          SUBNETS:
            !If [CreateNewVPC, !Join [ ",", [ !Ref Subnet1, !Ref Subnet2 ]], !Join [ ",", [ !Ref ExistingSubnet1Id, !Ref ExistingSubnet2Id ]]]
          USER_AGENT_STRING: !Sub
            - "AwsSolution/${SolutionID}/${Version}"
            - SolutionID: !FindInMap [Solution, Data, "ID"]
              Version: !FindInMap [Solution, Data, "Version"]
      Code:
        S3Bucket: !Join
          - '-'
          - - "%DIST_BUCKET_NAME%"
            - !Ref "AWS::Region"
        S3Key: "%SOLUTION_NAME%/%VERSION%/workspaces-cost-optimizer.zip"
      Handler: lambda/create-task.lambda_handler
      Runtime: python3.8
      Timeout: 300
      ReservedConcurrentExecutions: 1

  # For now we use a lambda to create the task and CloudEvent to schedule
  # This choice was made so that the user can fire the task on-demand using the lambda, outside of the schedule
  # Once the network properties are available via EcsParameters we can schedule directly
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-events-rule-target.html#cfn-events-rule-target-ecsparameters
  # Open ticket: https://sim.amazon.com/issues/CFN-4748

  ScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule to trigger WorkSpacesCostOptimizer function on a schedule.
      ScheduleExpression: cron(55 23 * * ? *)
      State: ENABLED
      Targets:
      - Arn: !GetAtt CostOptimizerCreateTaskFunction.Arn
        Id: CostOptimizerCreateTaskFunction

  # ECS/Fargate [end]

  # External Resources [start]

  SolutionHelperFunction:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: "The lambda function has access to write logs"
          - id: W89
            reason: "The lambda function does not need access to resources in VPC"
    Properties:
      Role: !GetAtt SolutionHelperRole.Arn
      Description: Solution Helper Lambda Function
      Code:
        S3Bucket: !Join
          - '-'
          - - "%DIST_BUCKET_NAME%"
            - !Ref "AWS::Region"
        S3Key: "%SOLUTION_NAME%/%VERSION%/workspaces-cost-optimizer.zip"
      Handler: lambda/uuid-helper.lambda_handler
      Runtime: python3.8
      Timeout: 300
      Environment:
        Variables:
          USER_AGENT_STRING: !Sub
            - "AwsSolution/${SolutionID}/${Version}"
            - SolutionID: !FindInMap [Solution, Data, "ID"]
              Version: !FindInMap [Solution, Data, "Version"]
      ReservedConcurrentExecutions: 1


  SolutionHelperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
      Path: '/'

  SolutionHelperPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SolutionHelperPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
        - Effect: Allow
          Action:
          - iam:PassRole
          Resource: !GetAtt SolutionHelperRole.Arn
      Roles:
      - !Ref SolutionHelperRole
      
  UUIDGenerator:
    Type: "Custom::UUIDGenerator"
    Properties:
      ServiceToken: !GetAtt SolutionHelperFunction.Arn
      Region: !Ref AWS::Region
      DependsOn: SolutionHelperFunction

  FlowLogRole:
    Type: AWS::IAM::Role
    Condition: CreateNewVPC
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: vpc-flow-logs.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: flowlogs-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            Resource: !GetAtt FlowLogGroup.Arn

  FlowLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: CreateNewVPC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "CloudWatch logs are encrypted by the service."
          - id: W86
            reason: "CloudWatch logs are set to never expire."

  FlowLog:
    Type: AWS::EC2::FlowLog
    Condition: CreateNewVPC
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn
      LogGroupName: !Ref FlowLogGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      

  # External Resources [end]

Outputs:
  BucketName:
    Description: The name of the bucket created by the solution.
    Value: !Ref CostOptimizerBucket
  UUID:
    Description: Unique identifier for this solution
    Value: !GetAtt UUIDGenerator.UUID
  LogLevel:
    Value: !Ref LogLevel
  DryRun:
    Value: !Ref DryRun
  OnlyInCurrentRegion:
    Value: !Ref OnlyInCurrentRegion
  SendAnonymousData:
    Value: !FindInMap [Solution, Data, "SendAnonymousUsageData"]
  SolutionID:
    Value: !FindInMap [Solution, Data, "ID"]
  SolutionVersion:
    Value: !FindInMap [Solution, Data, "Version"]
  TestEndOfMonth:
    Value: !Ref TestEndOfMonth
  ValueLimit:
    Value: !Ref ValueLimit
  StandardLimit:
    Value: !Ref StandardLimit
  PerformanceLimit:
    Value: !Ref PerformanceLimit
  PowerLimit:
    Value: !Ref PowerLimit
  PowerProLimit:
    Value: !Ref PowerProLimit
  GraphicsLimit:
    Value: !Ref GraphicsLimit
  GraphicsProLimit:
    Value: !Ref GraphicsProLimit
