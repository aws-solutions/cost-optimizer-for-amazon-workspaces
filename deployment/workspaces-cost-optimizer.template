Description: "(SO0018) - WorkSpaces Cost Optimizer: A solution for automatically optimizing the cost of Amazon Workspaces version %%VERSION%%"
Parameters:
  VpcCIDR:
    Type: String
    Default: "10.215.0.0/16"
    Description: This VPC launches containers. Change addresses only if it conflicts with your network.

  Subnet1CIDR:
    Type: String
    Default: "10.215.10.0/24"

  Subnet2CIDR:
    Type: String
    Default: "10.215.20.0/24"

  LogLevel:
    Type: String
    Default: INFO
    AllowedValues:
    - CRITICAL
    - ERROR
    - INFO
    - WARNING
    - DEBUG
  DryRun:
    Type: String
    Description: Solution will generate a change log, but not execute any changes.
    Default: "Yes"
    AllowedValues:
    - "Yes"
    - "No"
  TestEndOfMonth:
    Type: String
    Description: Overrides date and forces the solution to run as if it is the end of the month.
    Default: "No"
    AllowedValues:
    - "Yes"
    - "No"
  ValueLimit:
    Type: Number
    Description: The number of hours a Value instance can run in a month before being converted to ALWAYS_ON. Default is 81.
    Default: 81
  StandardLimit:
    Type: Number
    Description: The number of hours a Standard instance can run in a month before being converted to ALWAYS_ON. Default is 85.
    Default: 85
  PerformanceLimit:
    Type: Number
    Description: The number of hours a Performance instance can run in a month before being converted to ALWAYS_ON. Default is 83.
    Default: 83
  PowerLimit:
    Type: Number
    Description: The number of hours a Power instance can run in a month before being converted to ALWAYS_ON. Default is 83.
    Default: 83
  PowerProLimit:
    Type: Number
    Description: The number of hours a Power Pro instance can run in a month before being converted to ALWAYS_ON. Default is 80.
    Default: 80
  GraphicsLimit:
    Type: Number
    Description: The number of hours a Graphics instance can run in a month before being converted to ALWAYS_ON. Default is 217.
    Default: 217
  GraphicsProLimit:
    Type: Number
    Description: The number of hours a Graphics Pro instance can run in a month before being converted to ALWAYS_ON. Default is 80.
    Default: 80

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Testing Parameters
      Parameters:
        - DryRun
        - TestEndOfMonth
        - LogLevel
    - Label:
        default: Pricing Parameters
      Parameters:
        - ValueLimit
        - StandardLimit
        - PerformanceLimit
        - GraphicsLimit
        - GraphicsProLimit
        - PowerLimit
        - PowerProLimit
    ParameterLabels:
      DryRun:
        default: Launch in Dry Run Mode
      TestEndOfMonth:
        default: Simulate End of Month Cleanup
      LogLevel:
        default: Log Level

Mappings:
  Solution:
    Data:
      ClusterName: "cost-optimizer-cluster"
      TaskDefinitionName: "wco-task"
      LogGroupName: "/ecs/wco-task"
      ID: "SO0018"
      Version: "%%VERSION%%" 
      SendAnonymousUsageData: True

Resources:

  # Permissions & Policies [start]

  CostOptimizerAdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - "ecs-tasks.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  CostOptimizerAdminPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CostOptimizerAdminPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - workspaces:DescribeTags
          - workspaces:DescribeWorkspaces
          - workspaces:DescribeWorkspaceDirectories
          - workspaces:DescribeWorkspaceBundles
          - workspaces:ModifyWorkspaceProperties
          Resource: '*'
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
            !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref CostOptimizerBucket
              - /*
        - Effect: Allow
          Action:
          - cloudwatch:GetMetricStatistics
          Resource: '*'
      Roles:
      - !Ref CostOptimizerAdminRole

  CostOptimizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  CostOptimizerLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CostOptimizerLambdaPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - ecs:RunTask
          Resource: !Join [":", [ "arn:aws:ecs", !Ref "AWS::Region", !Ref "AWS::AccountId", "task-definition/wco-task" ] ]
        - Effect: Allow
          Action:
          - iam:PassRole
          Resource: !GetAtt CostOptimizerAdminRole.Arn
      Roles:
      - !Ref CostOptimizerLambdaRole

  CostOptimizerScheduleRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CostOptimizerCreateTaskFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CostOptimizerScheduleRule.Arn

  # Permissions & Policies [end]

  # VPC [start]

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: "cost-optimizer-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "cost-optimizer-igw"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref Subnet1CIDR
      Tags:
        - Key: Name
          Value: "cost-optimizer-vpc-subnet1"

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref Subnet2CIDR
      Tags:
        - Key: Name
          Value: "cost-optimizer-vpc-subnet2"

  IntraVPCSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "Cost Optimizer Intra VPC Security Group"
      GroupDescription: "Security group that allows inbound from the VPC and outbound to the Internet"
      Tags:
        -
          Key: "Name"
          Value: "cost-optimizer-intra-vpc-sg"
      VpcId: !Ref VPC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          -
            id: F1000
            reason: "Missing egress rule is desired to specifically allow all traffic outbound"

  IntraVPCSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref IntraVPCSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref IntraVPCSecurityGroup

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "cost-optimizer-vpc-routetable"

  DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet2

  # VPC [end]

  # S3 [start]

# https://stackoverflow.com/questions/48229796/how-do-you-set-sse-s3-or-sse-kms-encryption-on-s3-buckets-using-cloud-formation
  CostOptimizerBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: "Retain"
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # S3 [end]

  # Logs [start]

  CostOptimizerLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ "/", [!FindInMap [Solution, Data, "LogGroupName"], !Ref "AWS::StackName"] ]

  # Logs [end]

  # ECS/Fargate [start]

  # Create the ECS Cluster
  CostOptimizerCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !FindInMap [Solution, Data, "ClusterName"]

  # Create the task definition
  CostOptimizerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256"
      Family:  !FindInMap [Solution, Data, "TaskDefinitionName"]
      Memory: "1024"
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt CostOptimizerAdminRole.Arn
      TaskRoleArn: !GetAtt CostOptimizerAdminRole.Arn
      ContainerDefinitions:
        - Name: "wco2-container"
          Image: "898061675696.dkr.ecr.us-east-1.amazonaws.com/wco:2.1"
          Essential: True
          Cpu: "256"

          # Environment variables can be customized by adding parameters/values below. Secrets
          # should be stored in AWS Systems Manager Parameter Store.
          # See: https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html
          Environment:
            - Name: LogLevel
              Value: !Ref LogLevel
            - Name: DryRun
              Value: !Ref DryRun
            - Name: TestEndOfMonth
              Value: !Ref TestEndOfMonth
            - Name: SendAnonymousData
              Value: !FindInMap [Solution, Data, "SendAnonymousUsageData"]
            - Name: SolutionVersion
              Value: !FindInMap [Solution, Data, "Version"]
            - Name: SolutionID
              Value: !FindInMap [Solution, Data, "ID"]
            - Name: UUID
              Value: !GetAtt UUIDGenerator.UUID
            - Name: BucketName
              Value: !Ref CostOptimizerBucket
            - Name: ValueLimit
              Value: !Ref ValueLimit
            - Name: StandardLimit
              Value: !Ref StandardLimit
            - Name: PerformanceLimit
              Value: !Ref PerformanceLimit
            - Name: PowerLimit
              Value: !Ref PowerLimit
            - Name: PowerProLimit
              Value: !Ref PowerProLimit
            - Name: GraphicsLimit
              Value: !Ref GraphicsLimit
            - Name: GraphicsProLimit
              Value: !Ref GraphicsProLimit

          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref CostOptimizerLogs
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"

  CostOptimizerCreateTaskFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt CostOptimizerLambdaRole.Arn
      Description: WorkspaceCostOptimizer CreateTask Lambda Function
      Environment:
        Variables:
          Cluster: !FindInMap [Solution, Data, "ClusterName"]
          TaskDefinition: !FindInMap [Solution, Data, "TaskDefinitionName"]
          Subnets: !Join [ ",", [ !Ref Subnet1, !Ref Subnet2 ] ]
          SecurityGroups: !Join [ ",", [ !Ref IntraVPCSecurityGroup ] ]
      Code:
        S3Bucket: !Join
          - '-'
          - - "%%BUCKET_NAME%%"
            - !Ref "AWS::Region"
        S3Key: workspaces-cost-optimizer/%%VERSION%%/workspaces-cost-optimizer.zip
      Handler: source/helpers/create-task.lambda_handler
      Runtime: python3.7
      Timeout: 300

  # For now we use a lambda to create the task and CloudEvent to schedule
  # This choice was made so that the user can fire the task on-demand using the lambda, outside of the schedule
  # Once the network properties are available via EcsParameters we can schedule directly
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-events-rule-target.html#cfn-events-rule-target-ecsparameters
  # Open ticket: https://sim.amazon.com/issues/CFN-4748

  CostOptimizerScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule to trigger WorkSpacesCostOptimizer function on a schedule.
      ScheduleExpression: cron(55 23 * * ? *)
      State: ENABLED
      Targets:
      - Arn: !GetAtt CostOptimizerCreateTaskFunction.Arn
        Id: CostOptimizerCreateTaskFunction

  # ECS/Fargate [end]

  # External Resources [start]

  SolutionHelperFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt SolutionHelperRole.Arn
      Description: Solution Helper Lambda Function
      Code:
        S3Bucket: !Join
          - '-'
          - - "%%BUCKET_NAME%%"
            - !Ref "AWS::Region"
        S3Key: workspaces-cost-optimizer/%%VERSION%%/workspaces-cost-optimizer.zip
      Handler: source/helpers/uuid-helper.lambda_handler
      Runtime: python3.7
      Timeout: 300

  SolutionHelperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
      Path: '/'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  UUIDGenerator:
    Type: "Custom::UUIDGenerator"
    Properties:
      ServiceToken: !GetAtt SolutionHelperFunction.Arn
      Region: !Ref AWS::Region
      DependsOn: SolutionHelperFunction
      

  # External Resources [end]

Outputs:
  BucketName:
    Description: The name of the bucket created by the solution.
    Value: !Ref CostOptimizerBucket
  UUID:
    Description: Unique identifier for this solution
    Value: !GetAtt UUIDGenerator.UUID
  LogLevel:
    Value: !Ref LogLevel
  DryRun:
    Value: !Ref DryRun
  SendAnonymousData:
    Value: !FindInMap [Solution, Data, "SendAnonymousUsageData"]
  SolutionID:
    Value: !FindInMap [Solution, Data, "ID"]
  SolutionVersion:
    Value: !FindInMap [Solution, Data, "Version"]
  TestEndOfMonth:
    Value: !Ref TestEndOfMonth
  ValueLimit:
    Value: !Ref ValueLimit
  StandardLimit:
    Value: !Ref StandardLimit
  PerformanceLimit:
    Value: !Ref PerformanceLimit
  PowerLimit:
    Value: !Ref PowerLimit
  PowerProLimit:
    Value: !Ref PowerProLimit
  GraphicsLimit:
    Value: !Ref GraphicsLimit
  GraphicsProLimit:
    Value: !Ref GraphicsProLimit
